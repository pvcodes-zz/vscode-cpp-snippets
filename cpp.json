{
  "c++ Biolerplate": {
    "prefix": "!cpp",
    "body": [
      "#include <iostream>\n",
      "int main()\t{",
      "\t${0}",
      "\treturn 0;",
      "}"
    ],
    "description": "C++ Boilder plate"
  },
  "cout": {
    "prefix": "!cout",
    "body": "std::cout << ${0:statement} << std::endl;",
    "description": "Make the cout statement"
  },
  "cin": {
    "prefix": "!cin",
    "body": "std::cin >> ${0:var_name};",
    "description": "Make the cin statement"
  },
  "std::string": {
    "prefix": "!string",
    "body": "std::string ${1:var_name}= \"${0:var_value}\";",
    "description": "Makes the std::string statement"
  },
  "class": {
    "prefix": "!class",
    "body": [
      "class ${1:ClassName} {",
      "\tprivate:",
      "\t\t${2:Your Code}",
      "\tpublic:",
      "\t\t${1:ClassName}(){",
      "\t\t\t${3:Your Code}",
      "\t\t}",
      "\t\t~${1:ClassName}(){",
      "\t\t\t${4:Your Code}",
      "\t\t}",
      "${0:SomethingElse}",
      "};"
    ]
  },
  "forloop": {
    "prefix": "!for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:value}; ${1:i}++) {",
      "\t${0://Your Code}",
      "}"
    ]
  },
  "include": {
    "prefix": "!include",
    "body": "#include ${0:Header.h}"
  },
  "vector": {
    "prefix": "!vector",
    "body": "std::vector<${1:TypeName}> ${2:VariableName} = ${0:values};"
  },
  "Header.h": {
    "prefix": "!header.h",
    "body": [
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "\t${0: //Code}",
      "#endif //${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
    ]
  },
  "puts": {
    "prefix": "!puts",
    "body": "puts(\"${1://Code}\");${0}"
  },
  "arraysize": {
    "prefix": "!arraysize",
    "body": "int l = sizeof(${1:var_name})/sizeof(${1:var_name}[0]);${0}"
  },
  "arraymax": {
    "prefix": "!arraymax",
    "body": [
      "int max(int A[], int l) {",
      "\tint max = A[0];",
      "\tfor (int i = 1; i < l; i++) ",
      "\t\tif (max < A[i]) max = A[i];",
      "\treturn max;",
      "}"
    ]
  },
  "arraymin": {
    "prefix": "!arraymin",
    "body": [
      "int min(int A[], int l) {",
      "\tint min = A[0];",
      "\tfor (int i = 1; i < l; i++) ",
      "\t\tif (min > A[i]) min = A[i];",
      "\treturn min;",
      "}"
    ]
  }
}
