{
  "c++ Biolerplate": {
    "prefix": "!cpp",
    "body": ["#include <iostream>", "using namespace std;\n", "int main()\t{", "\t${0}", "\treturn 0;", "}"],
    "description": "C++ Boilder plate"
  },
  "cout": {
    "prefix": "!cout",
    "body": "cout << ${0:statement} << endl;",
    "description": "Make the cout statement"
  },
  "cin": {
    "prefix": "!cin",
    "body": "cin >> ${0:var_name};",
    "description": "Make the cin statement"
  },
  "std::string": {
    "prefix": "!string",
    "body": "string ${1:var_name}= \"${0:var_value}\";",
    "description": "Makes the std::string statement"
  },
  "class": {
    "prefix": "!class",
    "body": [
      "class ${1:ClassName} {",
      "\tprivate:",
      "\t\t${2:Your Code}",
      "\tpublic:",
      "\t\t${1:ClassName}(){",
      "\t\t\t${3:Your Code}",
      "\t\t}",
      "\t\t~${1:ClassName}(){",
      "\t\t\t${4:Your Code}",
      "\t\t}",
      "${0:SomethingElse}",
      "};"
    ]
  },
  "forloop": {
    "prefix": "!for",
    "body": ["for (int ${1:i} = 0; ${1:i} < ${2:value}; ${1:i}++) {", "\t${0://Your Code}", "}"]
  },
  "include": {
    "prefix": "!include",
    "body": "#include ${0:Header.h}"
  },
  "vector": {
    "prefix": "!vector",
    "body": "<${1:TypeName}> ${2:VariableName} = ${0:values};"
  },
  "Header.h": {
    "prefix": "!header.h",
    "body": [
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "\t${0: //Code}",
      "#endif //${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
    ]
  },
  "puts": {
    "prefix": "!puts",
    "body": "puts(\"${1://Code}\");${0}"
  },
  "arraysize": {
    "prefix": "!arraysize",
    "body": "int l = sizeof(${1:var_name})/sizeof(${1:var_name}[0]);${0}"
  },
  "arraymax": {
    "prefix": "!arraymax",
    "body": [
      "int max(int A[], int l) {",
      "\tint max = A[0];",
      "\tfor (int i = 1; i < l; i++) ",
      "\t\tif (max < A[i]) max = A[i];",
      "\treturn max;",
      "}"
    ]
  },
  "arraymin": {
    "prefix": "!arraymin",
    "body": [
      "int min(int A[], int l) {",
      "\tint min = A[0];",
      "\tfor (int i = 1; i < l; i++) ",
      "\t\tif (min > A[i]) min = A[i];",
      "\treturn min;",
      "}"
    ]
  },
  "CP BIOLERPLATE": {
    "prefix": "!cppcp",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "typedef long long int ll;",
      "",
      "#define test(t) \\",
      "    int t;      \\",
      "    cin >> t;   \\",
      "    while (t--)",
      "#define f(i, a, b) for (int(i) = (a); (i) < (b); ++(i))",
      "#define endl \"\\n\"",
      "#define deb(x) cout << #x << \": \" << x << endl;",
      "#define fast                          \\",
      "    ios_base::sync_with_stdio(false); \\",
      "    cin.tie(NULL);                    \\",
      "    cout.tie(NULL);",
      "",
      "void solve() {${0:Code Here}}",
      "",
      "int main() {",
      "    fast;",
      "    test(t) solve();",
      "    return 0;",
      "}",
      ""
    ],
    "description": "CP BIOLERPLATE"
  },
  "CP BIOLERPLATE ADVANCE": {
    "prefix": "!cppcp",
    "body": [
      "#pragma GCC optimize(\"O3\")",
      "",
      "#include <bits/stdc++.h>",
      "",
      "#include <ext/pb_ds/assoc_container.hpp>",
      "#include <ext/pb_ds/tree_policy.hpp>",
      "",
      "using namespace std;",
      "using namespace __gnu_pbds;",
      "",
      "typedef long long int ll;",
      "typedef unsigned long long int ull;",
      "typedef long double ld;",
      "",
      "typedef pair<int, int> pii;",
      "typedef pair<ll, ll> pll;",
      "typedef vector<int> vi;",
      "typedef vector<ll> vll;",
      "typedef vector<pii> vpii;",
      "typedef vector<pll> vpll;",
      "",
      "#define test(t) \\",
      "    int t;      \\",
      "    cin >> t;   \\",
      "    while (t--)",
      "#define f(i, a, b) for (int(i) = (a); (i) < (b); ++(i))",
      "#define all(a) (a).begin(), (a).end()",
      "#define endl \"\\n\"",
      "#define ff first",
      "#define ss second",
      "#define pb push_back",
      "#define deb(x) cout << #x << \": \" << x << endl;",
      "#define deb2(x, y) cout << #x << \": \" << x << \" ~ \" << #y << \": \" << y << endl;",
      "#define deba(arr)                        \\",
      "    cout << #arr << \" ~ [ \";             \\",
      "    for (auto n : arr) cout << n << \" \"; \\",
      "    cout << \"]\" << endl;",
      "#define debap(arr)                                                \\",
      "    cout << #arr << \" ~ [ \";                                      \\",
      "    for (auto n : arr) cout << n.first << \"-\" << n.second << \" \"; \\",
      "    cout << \"]\" << endl;",
      "#define fast                          \\",
      "    ios_base::sync_with_stdio(false); \\",
      "    cin.tie(NULL);                    \\",
      "    cout.tie(NULL);",
      "",
      "#define mx9 1000000007",
      "#define mx7 10000007",
      "#define mx6 1000006",
      "#define mx5 200005",
      "#define inf 1 << 30",
      "#define eps 1e-9",
      "#define mod 1000000007",
      "#define PI 3.141592653589793238462643383279502884L",
      "",
      "void solve() {${0:Code Here}}",
      "",
      "int main() {",
      "    fast;",
      "    test(t) solve();",
      "    return 0;",
      "}"
    ],
    "description": "CP BIOLERPLATE ADVANCE"
  }
}
